
import request from 'supertest';
import express from 'express';
import { registerRoutes } from '../server/routes';
import { WebScraper, calculateRelevanceScore } from '../server/scraping';
import { storage } from '../server/storage';

describe('Content Authenticity and Anti-Fake Content Tests', () => {
  let app: express.Application;

  beforeAll(async () => {
    app = express();
    app.use(express.json());
    await registerRoutes(app);
  });

  describe('URL Validation and Real Content Verification', () => {
    test('should reject fake/placeholder URLs in scraping targets', async () => {
      const fakeUrls = [
        'https://example.com',
        'https://test.com',
        'https://placeholder.url',
        'https://fake-domain.invalid',
        'https://localhost:3000',
        'https://127.0.0.1',
        'http://dummy.test'
      ];

      for (const url of fakeUrls) {
        const response = await request(app)
          .post('/api/scraping-targets')
          .send({
            domain: new URL(url).hostname,
            baseUrl: url,
            isActive: true,
            scrapingFrequency: 24,
            rateLimit: 2000,
            maxPages: 10,
            selectors: {}
          });

        // Should either reject fake URLs or flag them for manual review
        if (response.status === 201) {
          expect(response.body.needsReview).toBe(true);
        } else {
          expect([400, 422]).toContain(response.status);
        }
      }
    });

    test('should validate real URLs return actual content', async () => {
      const realUrls = [
        'https://news.ycombinator.com',
        'https://techcrunch.com',
        'https://www.wired.com'
      ];

      const scraper = new WebScraper();
      
      for (const url of realUrls) {
        const result = await scraper.scrapeUrl(url);
        
        if (result.success && result.content) {
          // Verify content is not placeholder/fake
          expect(result.content.title).not.toMatch(/^(test|example|placeholder|lorem|ipsum)/i);
          expect(result.content.content.length).toBeGreaterThan(500);
          expect(result.content.author).not.toMatch(/^(test|example|placeholder)/i);
          expect(result.content.domain).not.toMatch(/^(example|test|placeholder|localhost)/);
        }
      }
    });

    test('should detect and flag suspicious content patterns', async () => {
      const suspiciousContent = {
        url: 'https://real-domain.com/article',
        title: 'Lorem Ipsum Test Article',
        content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Test content placeholder.',
        summary: 'Test summary',
        author: 'Test Author',
        publishedDate: new Date(),
        scrapedDate: new Date(),
        contentHash: 'fake-hash-123',
        domain: 'real-domain.com',
        wordCount: 50,
        relevanceScore: 0,
        status: 'active',
        keywords: ['lorem', 'ipsum', 'test', 'placeholder']
      };

      // Content should be flagged as suspicious
      const isSuspicious = 
        /lorem ipsum/i.test(suspiciousContent.content) ||
        /test (article|content|author)/i.test(`${suspiciousContent.title} ${suspiciousContent.author}`) ||
        suspiciousContent.keywords?.some(k => ['lorem', 'ipsum', 'test', 'placeholder'].includes(k.toLowerCase()));

      expect(isSuspicious).toBe(true);
    });
  });

  describe('Content Generation Authenticity', () => {
    test('should prevent generation of fake content ideas', async () => {
      const response = await request(app)
        .post('/api/generate-content-ideas')
        .send({
          topicId: 999999, // Non-existent topic
          platform: 'linkedin',
          expertId: 999999 // Non-existent expert
        });

      expect(response.status).toBe(404);
      expect(response.body.message).toMatch(/(not found|does not exist)/i);
    });

    test('should validate generated content against real expert profiles', async () => {
      // First create a real expert with validated profile
      const expertResponse = await request(app)
        .get('/api/experts/2'); // Use existing expert from logs

      if (expertResponse.status === 200) {
        const expert = expertResponse.body;
        
        // Get real topics for this expert
        const topicsResponse = await request(app)
          .get(`/api/topics/${expert.id}`);

        if (topicsResponse.status === 200 && topicsResponse.body.length > 0) {
          const topic = topicsResponse.body[0];
          
          const contentResponse = await request(app)
            .post('/api/generate-content-ideas')
            .send({
              topicId: topic.id,
              platform: 'linkedin',
              expertId: expert.id
            });

          if (contentResponse.status === 201) {
            const ideas = contentResponse.body;
            
            // Validate generated content is not generic/fake
            ideas.forEach(idea => {
              expect(idea.title).not.toMatch(/^(example|test|lorem|placeholder)/i);
              expect(idea.description).not.toMatch(/lorem ipsum/i);
              expect(idea.description.length).toBeGreaterThan(50);
              expect(idea.keyPoints).toBeDefined();
              expect(Array.isArray(idea.keyPoints)).toBe(true);
            });
          }
        }
      }
    });
  });

  describe('RAG System Content Validation', () => {
    test('should validate scraped content authenticity before storage', async () => {
      const response = await request(app)
        .post('/api/scrape-url')
        .send({ url: 'https://example.com/fake-article' });

      // Should either fail or flag for review
      expect([400, 422]).toContain(response.status);
    });

    test('should verify relevance scoring uses real content', async () => {
      const mockProfile = {
        id: 1,
        expertId: 2,
        primaryExpertise: 'Artificial Intelligence',
        secondaryExpertise: ['Machine Learning'],
        expertiseKeywords: ['AI', 'ML', 'neural networks'],
        voiceTone: ['professional'],
        personalBranding: 'AI expert',
        platforms: ['linkedin'],
        targetAudience: 'Tech professionals',
        contentGoals: ['education'],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const realContent = {
        id: 1,
        url: 'https://real-tech-site.com/ai-article',
        title: 'Recent Advances in Neural Network Architecture',
        content: 'Recent research has shown significant improvements in transformer architectures...',
        summary: 'Discussion of latest neural network improvements',
        author: 'Dr. Sarah Chen',
        publishedDate: new Date(Date.now() - 24 * 60 * 60 * 1000),
        scrapedDate: new Date(),
        contentHash: 'real-content-hash',
        domain: 'real-tech-site.com',
        wordCount: 800,
        relevanceScore: 0,
        status: 'active',
        keywords: ['neural networks', 'AI', 'machine learning'],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      const score = calculateRelevanceScore(realContent, mockProfile);
      
      // Real content should score higher than fake content
      expect(score).toBeGreaterThan(60);
      expect(score).toBeLessThanOrEqual(100);
    });
  });

  describe('Data Integrity and Source Verification', () => {
    test('should validate information sources in expert profiles', async () => {
      const profileResponse = await request(app)
        .get('/api/expert-profiles/2');

      if (profileResponse.status === 200) {
        const profile = profileResponse.body;
        
        if (profile.informationSources) {
          for (const source of profile.informationSources) {
            if (source.url) {
              // Validate source URLs are not fake
              expect(source.url).not.toMatch(/^https?:\/\/(example|test|placeholder|localhost)/);
              
              // Try to verify URL is accessible (basic check)
              try {
                const url = new URL(source.url);
                expect(['http:', 'https:']).toContain(url.protocol);
              } catch (error) {
                fail(`Invalid URL in information sources: ${source.url}`);
              }
            }
          }
        }
      }
    });

    test('should prevent creation of experts with fake data', async () => {
      const fakeExpert = {
        username: 'test_user_123',
        name: 'Test Expert',
        role: 'Content Creator',
        password: 'test123',
        profileComplete: false
      };

      const response = await request(app)
        .post('/api/experts')
        .send(fakeExpert);

      // Should either reject or flag for manual verification
      if (response.status === 201) {
        expect(response.body.needsVerification).toBe(true);
      }
    });
  });

  describe('Authentication and Authorization Integrity', () => {
    test('should validate Replit authentication against real user data', async () => {
      const response = await request(app)
        .post('/api/auth/replit')
        .set('x-replit-user-id', '41596754')
        .set('x-replit-user-name', 'emailladis')
        .send({});

      expect(response.status).toBe(200);
      expect(response.body.username).toBe('emailladis');
      expect(response.body.id).toBeDefined();
      
      // Verify user data consistency
      expect(response.body.username).not.toMatch(/^(test|example|placeholder)/i);
    });

    test('should reject authentication with fake/test credentials', async () => {
      const fakeCredentials = [
        { userId: 'fake123', userName: 'testuser' },
        { userId: 'test456', userName: 'example_user' },
        { userId: '000000', userName: 'placeholder' }
      ];

      for (const creds of fakeCredentials) {
        const response = await request(app)
          .post('/api/auth/replit')
          .set('x-replit-user-id', creds.userId)
          .set('x-replit-user-name', creds.userName)
          .send({});

        // Should reject obvious fake credentials
        expect([401, 422]).toContain(response.status);
      }
    });
  });
});